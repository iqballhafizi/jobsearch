{"version":3,"sources":["components/JobDetails.js","components/Search.js","components/LocationFilter.js","components/Joblist.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["JobDetails","id","useParams","useState","job","setJob","loading","setLoading","useEffect","fetch","then","response","json","data","catch","error","console","log","className","to","class","parse","how_to_apply","Fragment","title","type","Date","created_at","getDay","src","company_logo","company","location","description","Search","updateDescription","searchTerm","setSearchTerm","placeholder","aria-label","aria-describedby","value","onChange","e","target","onClick","LocationFilter","handleFulltime","handleCityChange","cities","setLocation","name","checked","for","onKeyUp","key","map","city","Joblist","jobList","jobs","Home","setJobs","query","setQuery","setDescription","fulltime","setFulltime","queryString","prepareQuery","trim","App","basename","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d8e0ae83.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport parse from \"html-react-parser\";\r\n\r\nimport \"./styles/JobDetails.css\";\r\n\r\nfunction JobDetails() {\r\n  const { id } = useParams();\r\n  const [job, setJob] = useState({});\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://cors-anywhere.herokuapp.com/jobs.github.com/positions/${id}.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setJob(data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => console.log(\"error fetching jobs\" + error));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12 col-md-4 job-detail-side-col\">\r\n          <p>\r\n            <Link to=\"/\" className=\"d-flex align-items-center\">\r\n              <span class=\"material-icons\">keyboard_backspaces</span>\r\n              Back to search\r\n            </Link>\r\n          </p>\r\n          <p>How to Apply</p>\r\n          {loading === false && parse(job.how_to_apply)}\r\n        </div>\r\n        <div className=\"col-sm-12 col-md-8\">\r\n          {loading ? (\r\n            <p>Loading </p>\r\n          ) : (\r\n            <React.Fragment>\r\n              <div className=\"job-title mb-2\">\r\n                <h3>{job.title}</h3>\r\n                <span className=\"job-type\">{job.type}</span>\r\n              </div>\r\n              <p class=\"announced-at d-flex align-items-center\">\r\n                <i className=\"material-icons mr-2\">query_builder</i>\r\n                <small>\r\n                  {new Date(new Date() - new Date(job.created_at)).getDay() ===\r\n                  0\r\n                    ? \"Today\"\r\n                    : new Date(new Date() - new Date(job.created_at)).getDay() +\r\n                      \"day ago\"}\r\n                </small>\r\n              </p>\r\n              <div className=\"row company-details-wrapper\">\r\n                <div className=\"col-2 image-wrapper\">\r\n                  <img src={job.company_logo} />\r\n                </div>\r\n                <div className=\" col-10 company-details\">\r\n                  <h5>{job.company}</h5>\r\n                  <p className=\"company-location\">\r\n                    <i className=\"material-icons mr-2\">public</i> {job.location}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n              {parse(job.description)};\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobDetails;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport \"./styles/search.css\";\r\n\r\nfunction Search({ updateDescription}) {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  \r\n\r\n  return (\r\n    <div className=\"input-group search-box\">\r\n      <span class=\"material-icons\">work_outline</span>\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control \"\r\n        placeholder=\"Titles, companies, expertise or benefits\"\r\n        aria-label=\"Recipient's username\"\r\n        aria-describedby=\"button-addon2\"\r\n        value={searchTerm}\r\n        onChange={e => setSearchTerm(e.target.value)}\r\n      />\r\n      <div className=\"input-group-append search-btn\">\r\n        <button className=\"btn btn-primary\" type=\"button\" id=\"button-search\" onClick={() => updateDescription(searchTerm)}>\r\n          Search\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nfunction LocationFilter({ handleFulltime, handleCityChange }) {\r\n  const [cities, setCities] = useState([\r\n    \"London\",\r\n    \"Amsterdam\",\r\n    \"Newyork\",\r\n    \"Berlin\",\r\n    \"Hamburg\",\r\n  ]);\r\n  const [location, setLocation] = useState(\"\");\r\n\r\n \r\n  const handleLocationChange = (value) => {\r\n    setLocation(value);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div class=\"form-check\">\r\n        <input\r\n          class=\"form-check-input\"\r\n          type=\"checkbox\"\r\n          value=\"\"\r\n          name=\"fulltimeCheck\"\r\n          onChange={(e) => handleFulltime(e.target.checked)}\r\n        />\r\n        <label class=\"form-check-label\" for=\"fulltimeCheck\">\r\n          Fulltime\r\n        </label>\r\n      </div>\r\n      <label for=\"Location\" className=\"mt-3\">\r\n        Location\r\n      </label>\r\n      <div class=\"input-group mb-2\">\r\n        <div class=\"input-group-prepend\">\r\n          <span class=\"input-group-text\" id=\"basic-addon1\">\r\n            <i class=\"material-icons\">public</i>\r\n          </span>\r\n        </div>\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          placeholder=\"city, state, zip code, country\"\r\n          aria-label=\"Location\"\r\n          aria-describedby=\"basic-addon1\"\r\n          value={location}\r\n          name=\"city\"\r\n          onChange={(e) => handleLocationChange(e.target.value)}\r\n          onKeyUp={(e) => e.key === 'Enter' ? handleCityChange(location) : console.log(e.key)}\r\n        />\r\n      </div>\r\n      {cities.map((city) => {\r\n        return (\r\n          <div class=\"form-check mt-2\">\r\n            <input\r\n              type=\"radio\"\r\n              class=\"form-check-input\"\r\n              value={city}\r\n              id={city}\r\n              name=\"city\"\r\n              onChange={e => handleCityChange(e.target.value)}\r\n            />\r\n            <label class=\"form-check-label\" for={city}>\r\n              {city}\r\n            </label>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LocationFilter;\r\n","import React from \"react\";\r\n\r\nimport \"./styles/joblist.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Joblist({ jobs }) {\r\n  let jobList = jobs.map((job) => {\r\n    return (\r\n      <div className=\"job-item\">\r\n        <div className=\"row\" key={job.id}>\r\n          <div className=\"col-3 col-md-2\">\r\n            <Link to={`/job/${job.id}`}>\r\n              <img src={job.company_logo} />\r\n            </Link>\r\n          </div>\r\n\r\n          <div className=\"col-9 col-md-10\">\r\n            <Link to={`/job/${job.id}`}>\r\n              <p>{job.company}</p>\r\n              <p>{job.title}</p>\r\n              <p>{job.type}</p>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div class=\"col-6  offset-md-2  col-md-4  d-flex align-items-center\">\r\n            <i class=\"material-icons\">public</i>\r\n            <small>{job.location}</small>\r\n          </div>\r\n          <div class=\"col-6 col-md-4 d-flex align-items-center\">\r\n            <i class=\"material-icons\">query_builder</i>\r\n            <small>\r\n              {new Date(new Date() - new Date(job.created_at)).getDay() === 0\r\n                ? \"Today\"\r\n                : new Date(new Date() - new Date(job.created_at)).getDay() +\r\n                  \"day ago\"}\r\n            </small>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n  return <div className=\"job-wrapper\">{jobList}</div>;\r\n}\r\n\r\nexport default Joblist;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n\r\nimport Search from \"./components/Search.js\";\r\nimport LocationFilter from \"./components/LocationFilter.js\";\r\nimport Joblist from \"./components/Joblist.js\";\r\n\r\n\r\nfunction Home() {\r\n      // Declare a new state variable, which we'll call \"jobList\"\r\n  const [jobs, setJobs] = useState([]);\r\n  const [query, setQuery] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [location, setLocation] = useState(\"hamburg\");\r\n  const [fulltime, setFulltime] = useState(false);\r\n\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://cors-anywhere.herokuapp.com/jobs.github.com/positions.json?${query}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => setJobs(data))\r\n      .catch((error) => console.log(\"error fetching jobs\" + error));\r\n  }, [query]);\r\n\r\n  const updateDescription = (description) => {\r\n    setDescription(description);\r\n  };\r\n\r\n  const handleFulltime = (fulltime) => {\r\n    setFulltime(fulltime);\r\n  };\r\n\r\n  const handleCityChange = (location) => {\r\n    if (location.trim() !== \"\") {\r\n      setLocation(location);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const prepareQuery = () => {\r\n      let queryString = \"\";\r\n\r\n      queryString += \"&location=\" + location;\r\n\r\n      queryString += \"&description=\" + description;\r\n\r\n      queryString += \"&fulltime=\" + fulltime;\r\n\r\n      setQuery(queryString);\r\n    };\r\n\r\n    prepareQuery();\r\n  }, [description, location, fulltime]); // ✅ OK (our effect only uses `someProp`)\r\n\r\n  return (\r\n    <section>\r\n      <header>\r\n        <div className=\"search-wrapper mt-3\">\r\n          <Search updateDescription={updateDescription} />\r\n        </div>\r\n      </header>\r\n      <div class=\"row mt-4\">\r\n        <div class=\"col-md-4\">\r\n          {\" \"}\r\n          <LocationFilter\r\n            handleFulltime={handleFulltime}\r\n            handleCityChange={handleCityChange}\r\n          />\r\n\r\n        </div>\r\n        <div class=\"col-md-8\">\r\n          <Joblist jobs={jobs} />\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport JobDetails from \"./components/JobDetails.js\";\nimport Home from \"./Home.js\";\n\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router basename=\"/jobsearch\">\n      <div className=\"App container\">\n        <div className=\"row mt-3 mb-3\">\n          <div className=\"col-12\">\n            <strong>Github</strong> Jobs\n          </div>\n        </div>\n\n        <Switch>\n          <Route exact path=\"/job/:id\" component={JobDetails} />\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n        <footer className=\"text-center m-6\">\n          Ahmad Iqbal Hafizi @ DevChallenges.io\n        </footer>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}